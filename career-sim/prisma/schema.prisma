datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id          BigInt   @id @default(dbgenerated("AUTO_RANDOM"))
  email            String   @unique
  name             String?
  country          String?
  passwordHash  String?
  created_at       DateTime @default(now())
  
  // --- Google Calendar integration ---
  googleTokens      Json?       // { access_token, refresh_token, expiry_date, scope, token_type }
  googleCalendarId  String?     // e.g. "primary" or a specific calendar id
  googleAccountEmail String?    // helpful for showing which account is connected
  googleScope       String?     // last granted scopes
  googleTokenUpdatedAt DateTime?

  skills           UserSkill[]
  userProfile      UserProfile?

  @@map("users")
}

model UserSkill {
  user_id     BigInt
  skill_name  String // main thing thats used
  last_updated  DateTime? @db.Date

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, skill_name])
  @@index([skill_name])
  @@map("user_skills")
}

model UserProfile {
  user_id          BigInt   @id
  resume           String @db.MediumText
  years_experience Int?     // 0..50
  education        String?
  updated_at       DateTime @updatedAt
  // resume_embedding VECTOR

  user User @relation(fields: [user_id], references: [user_id])
  @@map("user_profile")
}

model Resource {
  resource_id    BigInt   @id @default(autoincrement())
  title          String?
  provider       String?
  url            String?
  hours_estimate Decimal? @db.Decimal(5,1)
  cost           Decimal? @db.Decimal(8,2) @default(0)
  skill_targets  Json?
  description    String? @db.MediumText

  @@index([provider])
  @@map("resources")
}

model SkillNode {
  id         BigInt   @id @default(autoincrement())
  name       String
  parent_id  BigInt?
  aliases    Json?
  // VECTOR embedding  in TiDB;, set via raw SQL
  @@index([parent_id])

  @@map("skill_node")
}



model JobRole {
  id              BigInt   @id @default(autoincrement())
  title           String   @unique
  slug            String   @unique
  aliases         Json?                  // e.g. ["SWE", "Software Developer"]
  description     String?  @db.MediumText
  requiredSkills  Json?                  // e.g. ["SQL", "React", "Backlog grooming"]

  embedding Unsupported("VECTOR(384)")? // managed via raw SQL migration

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("job_role")
  @@index([slug])
}

model People {
  person_id       BigInt   @id @default(autoincrement())

  full_name       String   @db.VarChar(255)
  current_title   String?  @db.VarChar(1024)
  workplace       String?  @db.VarChar(1024)
  location        String?  @db.VarChar(1024)
  connections     Int?
  followers       Int?
  photo           Int?     // 1=yes, 0=no
  about           String?  @db.MediumText

  experiences     Json?
  educations      Json?
  licenses        Json?
  volunteering    Json?
  skills          Json?
  recommendations Json?
  projects        Json?
  publications    Json?
  courses         Json?
  honors          Json?
  scores          Json?
  languages       Json?
  organizations   Json?
  interests       Json?
  activities      Json?

  label           Int?
  sources         Json?
  resume_summary  String?  @db.MediumText
  resume_embedding Unsupported("VECTOR(384)") // REQUIRED for KNN

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("people")
}

model SessionData {
  threadId   String  @id        @map("thread_id")
  data       Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("session_data")
  @@index([updated_at], name: "idx_session_data_updated_at")
}